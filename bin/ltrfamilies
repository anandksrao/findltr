#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Author: maybelinot
# @Email: edik.trott@yandex.ru
# @Date:   2015-09-12 13:31:59
# @Last Modified by:   maybelinot
# @Last Modified time: 2015-09-12 14:34:07

import argparse
import os
import sys
import logging

import yaml
from Bio import SeqIO, SeqRecord
from Bio.Seq import Seq
from BCBio.GFF import GFFExaminer
from BCBio import GFF

from findltr import algorithms
from findltr.utils import logr


def parse_cli():
    '''
    findltr "public" CLI API
    '''
    # Setup the argparser
    parser = argparse.ArgumentParser(
        description='Get GFF')

    parser.add_argument(
        'input', metavar='i', nargs='+', help='Input gff file', type=str)

    parser.add_argument(
        'family_annotation', metavar='a', nargs='+', help=('Yaml file with '
                        'annotated HMM profiles to exact family, see example'),
                         type=str)
    parser.add_argument(
        '-o', metavar='o', nargs='?', dest='output', help='Output file')
    parser.add_argument(
        '-v', '--verbose', action='store_true', help="turn verbose logging ON")
    parser.add_argument(
        '-d', '--debug', action='store_true', help="turn debug logging ON")

    parser.add_argument('-min_c', '--min_count', nargs='?',
                        help='Minimal count of protein matches to include to family of LTR', default=1, type=int)

    args = vars(parser.parse_args())  # parse and load args as a dict

    # Go ahead and deal with logging debug/verbosity setting
    if args['debug']:
        # logr = logging.getLogger()  # get root logger
        logr.setLevel(logging.DEBUG)
    elif args['verbose']:
        logr.setLevel(logging.INFO)
    else:
        logr.setLevel(logging.WARN)

    return args


def family_annotation(in_gff, in_yaml, min_count, out_gff):
    out_gff = out_gff or "family_annotation.gff3"
    examiner = GFFExaminer()
    in_handle = open(in_gff)
    families = yaml.load(open(in_yaml))
    gff = SeqRecord.SeqRecord(Seq(""), "seq0")
    ltr_rtrns = []
    l = list(GFF.parse(in_handle))[0].features
    records = []
    rec_families = []
    for rec in l:
        if len([sub_feat.type for sub_feat in rec.sub_features[1].sub_features if sub_feat.type in ['protein_match', 'RR_tract', 'primer_binding_site']])>=1:
            # possible putative LTR retrotransposons
            proteins = []
            for sub_feat in rec.sub_features[1].sub_features:
                if sub_feat.type == 'protein_match':
                    proteins.append(sub_feat.qualifiers['name'][0])
            rec_family = {}
            for key, items in families.items():
                rec_family[key] = len(list(set(proteins).intersection(items)))
            rec.sub_features[1].qualifiers['family'] = ','.join([f for f in rec_family.keys() if rec_family[f]>=min_count])
        records.append(rec)
    gff.features = records
    with open(out_gff, "w") as out_handle:
        GFF.write([gff], out_handle)
    in_handle.close()


def main():
    args = parse_cli()
    family_annotation(args['input'][0],args['family_annotation'][0], args['min_count'], args['output'])


if __name__ == "__main__":
    main()
